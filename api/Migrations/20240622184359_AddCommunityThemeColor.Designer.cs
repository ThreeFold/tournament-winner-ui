// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TournamentWinner.Api.Data;

#nullable disable

namespace twapi.Migrations
{
    [DbContext(typeof(CommunityContext))]
    [Migration("20240622184359_AddCommunityThemeColor")]
    partial class AddCommunityThemeColor
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TournamentWinner.Api.Models.Bracket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CommunityGameId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("CommunityGameId");

                    b.ToTable("brackets", (string)null);
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("character", (string)null);
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.CharacterAlternateName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AlternateName")
                        .HasColumnType("text");

                    b.Property<int>("CharacterId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("CharacterAlternateName");
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.CharacterGame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterId")
                        .HasColumnType("integer");

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("UniqueIdentifier")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("GameId");

                    b.ToTable("characterGame", (string)null);
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.Community", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RegionState")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Slug")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("Slug");

                    b.ToTable("communities", (string)null);
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.CommunityGame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CommunityId")
                        .HasColumnType("integer");

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("CommunityId");

                    b.HasIndex("GameId");

                    b.ToTable("communityGames", (string)null);
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.CommunityGamePlayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CommunityGameId")
                        .HasColumnType("integer");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CommunityGameId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("UserId");

                    b.ToTable("CommunityGamePlayer");
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.CommunityUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CommunityId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CommunityId");

                    b.HasIndex("UserId");

                    b.ToTable("communityUsers", (string)null);
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BannerImage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IconImage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("games", (string)null);
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.GameSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BracketId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("Player1CharacterId")
                        .HasColumnType("integer");

                    b.Property<int>("Player1Id")
                        .HasColumnType("integer");

                    b.Property<int>("Player2CharacterId")
                        .HasColumnType("integer");

                    b.Property<int>("Player2Id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BracketId");

                    b.HasIndex("Player1CharacterId");

                    b.HasIndex("Player1Id");

                    b.HasIndex("Player2CharacterId");

                    b.HasIndex("Player2Id");

                    b.ToTable("gameSets", (string)null);
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.League", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CommunityGameId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Homepage")
                        .HasColumnType("text");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CommunityGameId");

                    b.ToTable("leagues", (string)null);
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Prefix")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("players", (string)null);
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.Profile", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("Handle")
                        .HasColumnType("text");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Prefix")
                        .HasColumnType("text");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("profiles", (string)null);
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.ProfileGame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("ProfileId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("ProfileId");

                    b.ToTable("userGames", (string)null);
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.ProfileGameCharacter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<int>("ProfileGameId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("ProfileGameId");

                    b.ToTable("userCharacters", (string)null);
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.Rank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<int>("RankValue")
                        .HasColumnType("integer");

                    b.Property<int?>("RankingId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("RankingId");

                    b.ToTable("ranks", (string)null);
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.Ranking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CommunityGameId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("PeriodEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("PeriodStart")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CommunityGameId");

                    b.ToTable("rankings", (string)null);
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime>("UserCreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.UserAuthMethod", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("AuthProviderId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AuthValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("userAuthMethods", (string)null);
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.Bracket", b =>
                {
                    b.HasOne("TournamentWinner.Api.Models.CommunityGame", null)
                        .WithMany("Brackets")
                        .HasForeignKey("CommunityGameId");
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.CharacterAlternateName", b =>
                {
                    b.HasOne("TournamentWinner.Api.Models.Character", "Character")
                        .WithMany("AlternateNames")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.CharacterGame", b =>
                {
                    b.HasOne("TournamentWinner.Api.Models.Character", "Character")
                        .WithMany("CharacterGames")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TournamentWinner.Api.Models.Game", "Game")
                        .WithMany("CharacterGames")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.Community", b =>
                {
                    b.OwnsOne("TournamentWinner.Api.Models.Color", "ThemeColor", b1 =>
                        {
                            b1.Property<int>("CommunityId")
                                .HasColumnType("integer");

                            b1.Property<byte>("Blue")
                                .HasColumnType("smallint");

                            b1.Property<byte>("Green")
                                .HasColumnType("smallint");

                            b1.Property<float>("Opacity")
                                .HasColumnType("real");

                            b1.Property<byte>("Red")
                                .HasColumnType("smallint");

                            b1.HasKey("CommunityId");

                            b1.ToTable("communities");

                            b1.WithOwner()
                                .HasForeignKey("CommunityId");
                        });

                    b.Navigation("ThemeColor")
                        .IsRequired();
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.CommunityGame", b =>
                {
                    b.HasOne("TournamentWinner.Api.Models.Community", "Community")
                        .WithMany("CommunityGames")
                        .HasForeignKey("CommunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TournamentWinner.Api.Models.Game", "Game")
                        .WithMany("CommunityGames")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Community");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.CommunityGamePlayer", b =>
                {
                    b.HasOne("TournamentWinner.Api.Models.CommunityGame", "CommunityGame")
                        .WithMany("CommunityGamePlayers")
                        .HasForeignKey("CommunityGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TournamentWinner.Api.Models.Player", "Player")
                        .WithMany("CommunityGamePlayer")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TournamentWinner.Api.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("CommunityGame");

                    b.Navigation("Player");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.CommunityUser", b =>
                {
                    b.HasOne("TournamentWinner.Api.Models.Community", "Community")
                        .WithMany("Users")
                        .HasForeignKey("CommunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TournamentWinner.Api.Models.User", "User")
                        .WithMany("Communities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Community");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.GameSet", b =>
                {
                    b.HasOne("TournamentWinner.Api.Models.Bracket", "Bracket")
                        .WithMany("Sets")
                        .HasForeignKey("BracketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TournamentWinner.Api.Models.Character", "Player1Character")
                        .WithMany()
                        .HasForeignKey("Player1CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TournamentWinner.Api.Models.Player", "Player1")
                        .WithMany()
                        .HasForeignKey("Player1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TournamentWinner.Api.Models.Character", "Player2Character")
                        .WithMany()
                        .HasForeignKey("Player2CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TournamentWinner.Api.Models.Player", "Player2")
                        .WithMany()
                        .HasForeignKey("Player2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bracket");

                    b.Navigation("Player1");

                    b.Navigation("Player1Character");

                    b.Navigation("Player2");

                    b.Navigation("Player2Character");
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.League", b =>
                {
                    b.HasOne("TournamentWinner.Api.Models.CommunityGame", null)
                        .WithMany("Leagues")
                        .HasForeignKey("CommunityGameId");
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.Profile", b =>
                {
                    b.HasOne("TournamentWinner.Api.Models.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("TournamentWinner.Api.Models.Profile", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.ProfileGame", b =>
                {
                    b.HasOne("TournamentWinner.Api.Models.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TournamentWinner.Api.Models.Profile", "Profile")
                        .WithMany("Games")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.ProfileGameCharacter", b =>
                {
                    b.HasOne("TournamentWinner.Api.Models.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TournamentWinner.Api.Models.ProfileGame", "UserGame")
                        .WithMany("Characters")
                        .HasForeignKey("ProfileGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("UserGame");
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.Rank", b =>
                {
                    b.HasOne("TournamentWinner.Api.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TournamentWinner.Api.Models.Ranking", null)
                        .WithMany("Ranks")
                        .HasForeignKey("RankingId");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.Ranking", b =>
                {
                    b.HasOne("TournamentWinner.Api.Models.CommunityGame", "CommunityGame")
                        .WithMany("Rankings")
                        .HasForeignKey("CommunityGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommunityGame");
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.UserAuthMethod", b =>
                {
                    b.HasOne("TournamentWinner.Api.Models.User", "User")
                        .WithMany("UserAuthMethods")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.Bracket", b =>
                {
                    b.Navigation("Sets");
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.Character", b =>
                {
                    b.Navigation("AlternateNames");

                    b.Navigation("CharacterGames");
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.Community", b =>
                {
                    b.Navigation("CommunityGames");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.CommunityGame", b =>
                {
                    b.Navigation("Brackets");

                    b.Navigation("CommunityGamePlayers");

                    b.Navigation("Leagues");

                    b.Navigation("Rankings");
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.Game", b =>
                {
                    b.Navigation("CharacterGames");

                    b.Navigation("CommunityGames");
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.Player", b =>
                {
                    b.Navigation("CommunityGamePlayer");
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.Profile", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.ProfileGame", b =>
                {
                    b.Navigation("Characters");
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.Ranking", b =>
                {
                    b.Navigation("Ranks");
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.User", b =>
                {
                    b.Navigation("Communities");

                    b.Navigation("Profile");

                    b.Navigation("UserAuthMethods");
                });
#pragma warning restore 612, 618
        }
    }
}
