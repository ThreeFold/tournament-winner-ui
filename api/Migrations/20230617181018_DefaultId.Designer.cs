// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TournamentWinner.Api.Data;

#nullable disable

namespace twapi.Migrations
{
    [DbContext(typeof(CommunityContext))]
    [Migration("20230617181018_DefaultId")]
    partial class DefaultId
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TournamentWinner.Api.Models.Bracket", b =>
                {
                    b.Property<int>("BracketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BracketId"));

                    b.Property<int?>("CommunityGameId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("BracketId");

                    b.HasIndex("CommunityGameId");

                    b.ToTable("brackets", (string)null);
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.Character", b =>
                {
                    b.Property<int>("CharacterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CharacterId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CharacterId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("character", (string)null);
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.CharacterAlternateName", b =>
                {
                    b.Property<int>("CharacterAlternateNameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CharacterAlternateNameId"));

                    b.Property<string>("AlternateName")
                        .HasColumnType("text");

                    b.Property<int>("CharacterId")
                        .HasColumnType("integer");

                    b.HasKey("CharacterAlternateNameId");

                    b.HasIndex("CharacterId");

                    b.ToTable("CharacterAlternateName");
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.CharacterGame", b =>
                {
                    b.Property<int>("CharacterGameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CharacterGameId"));

                    b.Property<int>("CharacterId")
                        .HasColumnType("integer");

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("UniqueIdentifier")
                        .HasColumnType("text");

                    b.HasKey("CharacterGameId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("GameId");

                    b.ToTable("characterGame", (string)null);
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.Community", b =>
                {
                    b.Property<int>("CommunityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CommunityId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OwnerUserId")
                        .HasColumnType("text");

                    b.Property<string>("Slug")
                        .HasColumnType("text");

                    b.HasKey("CommunityId");

                    b.HasIndex("OwnerUserId");

                    b.ToTable("communities", (string)null);
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.CommunityGame", b =>
                {
                    b.Property<int>("CommunityGameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CommunityGameId"));

                    b.Property<int>("CommunityId")
                        .HasColumnType("integer");

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("CommunityGameId");

                    b.HasIndex("CommunityId");

                    b.HasIndex("GameId");

                    b.ToTable("communityGames", (string)null);
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.CommunityUser", b =>
                {
                    b.Property<int>("CommunityUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CommunityUserId"));

                    b.Property<int>("CommunityId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CommunityUserId");

                    b.HasIndex("CommunityId");

                    b.HasIndex("UserId");

                    b.ToTable("communityUsers", (string)null);
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.CommunityUserRole", b =>
                {
                    b.Property<int>("CommunityUserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CommunityUserRoleId"));

                    b.Property<int?>("CommunityUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("RoleType")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CommunityUserRoleId");

                    b.HasIndex("CommunityUserId");

                    b.HasIndex("UserId");

                    b.ToTable("communityUserRoles", (string)null);
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.Game", b =>
                {
                    b.Property<int>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GameId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("GameId");

                    b.ToTable("games", (string)null);
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.GameSet", b =>
                {
                    b.Property<int>("GameSetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GameSetId"));

                    b.Property<int>("BracketId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("Player1CharacterId")
                        .HasColumnType("integer");

                    b.Property<int>("Player1Id")
                        .HasColumnType("integer");

                    b.Property<int>("Player2CharacterId")
                        .HasColumnType("integer");

                    b.Property<int>("Player2Id")
                        .HasColumnType("integer");

                    b.HasKey("GameSetId");

                    b.HasIndex("BracketId");

                    b.HasIndex("Player1CharacterId");

                    b.HasIndex("Player1Id");

                    b.HasIndex("Player2CharacterId");

                    b.HasIndex("Player2Id");

                    b.ToTable("gameSets", (string)null);
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.League", b =>
                {
                    b.Property<int>("LeagueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LeagueId"));

                    b.Property<int?>("CommunityGameId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Homepage")
                        .HasColumnType("text");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LeagueId");

                    b.HasIndex("CommunityGameId");

                    b.ToTable("leagues", (string)null);
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.Player", b =>
                {
                    b.Property<int>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PlayerId"));

                    b.Property<int?>("CommunityId")
                        .HasColumnType("integer");

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserGameId")
                        .HasColumnType("integer");

                    b.Property<string>("prefix")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("PlayerId");

                    b.HasIndex("CommunityId");

                    b.HasIndex("GameId");

                    b.HasIndex("UserGameId");

                    b.ToTable("players", (string)null);
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.Rank", b =>
                {
                    b.Property<int>("RankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RankId"));

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<int>("RankValue")
                        .HasColumnType("integer");

                    b.Property<int?>("RankingId")
                        .HasColumnType("integer");

                    b.HasKey("RankId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("RankingId");

                    b.ToTable("ranks", (string)null);
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.Ranking", b =>
                {
                    b.Property<int>("RankingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RankingId"));

                    b.Property<int>("CommunityGameId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("PeriodEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("PeriodStart")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("RankingId");

                    b.HasIndex("CommunityGameId");

                    b.ToTable("rankings", (string)null);
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.User", b =>
                {
                    b.Property<string>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<DateTime>("PlayerCreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UsernamePrefix")
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.UserGame", b =>
                {
                    b.Property<int>("UserGameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserGameId"));

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserGameId");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId");

                    b.ToTable("userGames", (string)null);
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.UserGameCharacter", b =>
                {
                    b.Property<int>("UserGameCharacterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserGameCharacterId"));

                    b.Property<int>("CharacterId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int>("UserGameId")
                        .HasColumnType("integer");

                    b.HasKey("UserGameCharacterId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("UserGameId");

                    b.ToTable("userCharacters", (string)null);
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.Bracket", b =>
                {
                    b.HasOne("TournamentWinner.Api.Models.CommunityGame", null)
                        .WithMany("Brackets")
                        .HasForeignKey("CommunityGameId");
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.CharacterAlternateName", b =>
                {
                    b.HasOne("TournamentWinner.Api.Models.Character", "Character")
                        .WithMany("AlternateNames")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.CharacterGame", b =>
                {
                    b.HasOne("TournamentWinner.Api.Models.Character", "Character")
                        .WithMany("CharacterGames")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TournamentWinner.Api.Models.Game", "Game")
                        .WithMany("GameCharacters")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.Community", b =>
                {
                    b.HasOne("TournamentWinner.Api.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerUserId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.CommunityGame", b =>
                {
                    b.HasOne("TournamentWinner.Api.Models.Community", "Community")
                        .WithMany("Games")
                        .HasForeignKey("CommunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TournamentWinner.Api.Models.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Community");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.CommunityUser", b =>
                {
                    b.HasOne("TournamentWinner.Api.Models.Community", "Community")
                        .WithMany("Users")
                        .HasForeignKey("CommunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TournamentWinner.Api.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Community");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.CommunityUserRole", b =>
                {
                    b.HasOne("TournamentWinner.Api.Models.CommunityUser", null)
                        .WithMany("Roles")
                        .HasForeignKey("CommunityUserId");

                    b.HasOne("TournamentWinner.Api.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.GameSet", b =>
                {
                    b.HasOne("TournamentWinner.Api.Models.Bracket", "Bracket")
                        .WithMany("Sets")
                        .HasForeignKey("BracketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TournamentWinner.Api.Models.Character", "Player1Character")
                        .WithMany()
                        .HasForeignKey("Player1CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TournamentWinner.Api.Models.Player", "Player1")
                        .WithMany()
                        .HasForeignKey("Player1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TournamentWinner.Api.Models.Character", "Player2Character")
                        .WithMany()
                        .HasForeignKey("Player2CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TournamentWinner.Api.Models.Player", "Player2")
                        .WithMany()
                        .HasForeignKey("Player2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bracket");

                    b.Navigation("Player1");

                    b.Navigation("Player1Character");

                    b.Navigation("Player2");

                    b.Navigation("Player2Character");
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.League", b =>
                {
                    b.HasOne("TournamentWinner.Api.Models.CommunityGame", null)
                        .WithMany("Leagues")
                        .HasForeignKey("CommunityGameId");
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.Player", b =>
                {
                    b.HasOne("TournamentWinner.Api.Models.Community", null)
                        .WithMany("Players")
                        .HasForeignKey("CommunityId");

                    b.HasOne("TournamentWinner.Api.Models.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TournamentWinner.Api.Models.UserGame", "User")
                        .WithMany()
                        .HasForeignKey("UserGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.Rank", b =>
                {
                    b.HasOne("TournamentWinner.Api.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TournamentWinner.Api.Models.Ranking", null)
                        .WithMany("Ranks")
                        .HasForeignKey("RankingId");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.Ranking", b =>
                {
                    b.HasOne("TournamentWinner.Api.Models.CommunityGame", "CommunityGame")
                        .WithMany("Rankings")
                        .HasForeignKey("CommunityGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommunityGame");
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.UserGame", b =>
                {
                    b.HasOne("TournamentWinner.Api.Models.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TournamentWinner.Api.Models.User", "User")
                        .WithMany("Games")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.UserGameCharacter", b =>
                {
                    b.HasOne("TournamentWinner.Api.Models.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TournamentWinner.Api.Models.UserGame", "UserGame")
                        .WithMany("Characters")
                        .HasForeignKey("UserGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("UserGame");
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.Bracket", b =>
                {
                    b.Navigation("Sets");
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.Character", b =>
                {
                    b.Navigation("AlternateNames");

                    b.Navigation("CharacterGames");
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.Community", b =>
                {
                    b.Navigation("Games");

                    b.Navigation("Players");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.CommunityGame", b =>
                {
                    b.Navigation("Brackets");

                    b.Navigation("Leagues");

                    b.Navigation("Rankings");
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.CommunityUser", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.Game", b =>
                {
                    b.Navigation("GameCharacters");
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.Ranking", b =>
                {
                    b.Navigation("Ranks");
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.User", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("TournamentWinner.Api.Models.UserGame", b =>
                {
                    b.Navigation("Characters");
                });
#pragma warning restore 612, 618
        }
    }
}
